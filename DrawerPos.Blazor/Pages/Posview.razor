@page "/posview"
@using DrawerPos.Shared
@inject DrawerPos.Blazor.Services.ProductService ProductService
@inject NavigationManager Navigation

<div class="container mx-auto p-4">
    <div class="mb-4 border-b border-gray-200 dark:border-gray-700">
        <ul class="flex flex-wrap -mb-px text-sm font-medium text-center" id="default-tab" role="tablist">
            @foreach (var category in categories)
            {
                <li class="mr-2" role="presentation">
                    <button class="inline-block p-4 border-b-2 rounded-t-lg @(category == selectedCategory ? "border-blue-500" : "border-transparent")"
                            @onclick="() => SelectCategory(category)"
                            aria-selected="@(category == selectedCategory)">
                        @category.CategoryName
                    </button>
                </li>
            }
        </ul>
    </div>

    <div class="flex flex-col md:flex-row mt-4">
        <!-- Left Side: Products -->
        <div class="md:w-1/2 p-4">
            <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4 space-x-4">
                @if (products == null)
                {
                    <div>Loading products...</div>
                }
                else if (!filteredProducts.Any())
                {
                    <div role="status" class="max-w-sm p-4 border border-gray-200 rounded shadow animate-pulse md:p-6 dark:border-gray-700">
                        <div class="flex items-center justify-center h-48 mb-4 bg-gray-300 rounded dark:bg-gray-700">
                            <svg class="w-16 h-16 text-gray-200 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                                <path d="M14.066 0H7v5a2 2 0 0 1-2 2H0v11a1.97 1.97 0 0 0 1.934 2h12.132A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.934-2ZM10.5 6a1.5 1.5 0 1 1 0 2.999A1.5 1.5 0 0 1 10.5 6Zm2.221 10.515a1 1 0 0 1-.858.485h-8a1 1 0 0 1-.9-1.43L5.6 10.039a.978.978 0 0 1 .936-.57 1 1 0 0 1 .9.632l1.181 2.981.541-1a.945.945 0 0 1 .883-.522 1 1 0 0 1 .879.529l1.832 3.438a1 1 0 0 1-.031.988Z" />
                                <path d="M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.98 2.98 0 0 0 .13 5H5Z" />
                            </svg>
                        </div>
                        <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-48 mb-4"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div>
                        <div class="flex items-center mt-4">
                            <div>
                                <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-32 mb-2"></div>
                                <div class="w-48 h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div>
                            </div>
                        </div>
                        <span class="sr-only">Loading...</span>
                    </div>
                }
                else
                {
                    @foreach (var product in filteredProducts)
                    {
                        <div id="cdproduct" class="animate-fade-up w-24 bg-white border border-gray-200 rounded-lg shadow-lg dark:bg-gray-800 dark:border-gray-700 p-4"
                             @onclick="() => AddToCart(product)">
                            <div class="flex flex-col items-center">
                                <img class="w-16 h-16 mb-2 rounded-full shadow-lg" src="@($"data:image/png;base64,{product.Image}")" alt="@product.ProductName" />
                                <h3 class="mb-1 text-sm font-bold text-gray-900 dark:text-white">@product.NameDisplay</h3>
                                <span class="text-xs text-gray-500 dark:text-gray-400">@product.ProductName</span>
                                <h3 class="mb-1 text-sm font-bold text-gray-900 dark:text-white">@product.Price.ToString("C")</h3>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Right Side: Cart -->
        <div class="md:w-1/2 p-4">
            <div class="border w-60 p-4 rounded" style="min-width: 300px; min-height: 400px;">
                <h3 class="text-lg font-semibold mb-2">Cart</h3>
                <ul>
                    @foreach (var item in Cart)
                    {
                        <li class="flex justify-between items-center mb-2">
                            <span class="text-xs w-16">@item.Product.NameDisplay</span>
                            <div class="relative flex items-center">
                                <button type="button" id="decrement-button" @onclick="() => UpdateQuantity(item, -1)" data-input-counter-decrement="quantity-input" class="flex-shrink-0 bg-gray-100 dark:bg-gray-700 dark:hover:bg-gray-600 dark:border-gray-600 hover:bg-gray-200 inline-flex items-center justify-center border border-gray-300 rounded-md h-5 w-5 focus:ring-gray-100 dark:focus:ring-gray-700 focus:ring-2 focus:outline-none">
                                    <svg class="w-3 h-3 text-gray-900 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 2">
                                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h16" />
                                    </svg>
                                </button>
                                <input type="text" id="quantity-input" value="@item.Quantity" data-input-counter aria-describedby="helper-text-explanation" class="flex-shrink-0 text-gray-900 dark:text-white border-0 bg-transparent text-xs font-normal focus:outline-none focus:ring-0 w-10 text-center" />
                                <button type="button" id="increment-button" @onclick="() => UpdateQuantity(item, 1)" data-input-counter-increment="quantity-input" class="flex-shrink-0 bg-gray-100 dark:bg-gray-700 dark:hover:bg-gray-600 dark:border-gray-600 hover:bg-gray-200 inline-flex items-center justify-center border border-gray-300 rounded-md h-5 w-5 focus:ring-gray-100 dark:focus:ring-gray-700 focus:ring-2 focus:outline-none">
                                    <svg class="w-3 h-3 text-gray-900 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18">
                                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 1v16M1 9h16" />
                                    </svg>
                                </button>
                            </div>
                            <span class="flex-shrink-0 text-gray-900 dark:text-white border-0 bg-transparent text-xs font-normal focus:outline-none focus:ring-0 w-10 text-center">@item.TotalPrice.ToString("0.##")</span>
                            <button class="px-2 py-1 bg-red-500 text-white rounded" @onclick="() => RemoveFromCart(item)">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                            </button>
                        </li>
                    }
                </ul>
                <div class="border-t mt-2 pt-2 flex justify-between">
                    <span class="font-semibold">Total:</span>
                    <span>@CartTotal.ToString("C")</span>
                </div>
            </div>
        </div>


    </div>
</div>

@code {
    private IEnumerable<Product> products = new List<Product>();
    private IEnumerable<Product> filteredProducts = new List<Product>();
    private IEnumerable<Category> categories = new List<Category>();
    private Category selectedCategory;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProducts();
        categories = await ProductService.GetCategories();
        if (categories.Any())
        {
            selectedCategory = categories.First();
            FilterProducts();
        }
    }

    private void SelectCategory(Category category)
    {
        selectedCategory = category;
        FilterProducts();
    }

    private void FilterProducts()
    {
        if (selectedCategory != null)
        {
            filteredProducts = products.Where(p => p.CategoryId == selectedCategory.CategoryId).ToList();
        }
        else
        {
            filteredProducts = products;
        }
    }

    private List<CartItem> Cart = new List<CartItem>();

    private void AddToCart(Product product)
    {
        var cartItem = Cart.FirstOrDefault(c => c.Product.ProductId == product.ProductId);
        if (cartItem == null)
        {
            Cart.Add(new CartItem { Product = product, Quantity = 1, TotalPrice = product.Price });
        }
        else
        {
            cartItem.Quantity++;
            cartItem.TotalPrice += product.Price;
        }
        StateHasChanged();
    }

    private void UpdateQuantity(CartItem item, int change)
    {
        item.Quantity += change;
        if (item.Quantity <= 0)
        {
            Cart.Remove(item);
        }
        else
        {
            item.TotalPrice = item.Product.Price * item.Quantity;
        }
        StateHasChanged();
    }

    private void RemoveFromCart(CartItem item)
    {
        Cart.Remove(item);
        StateHasChanged();
    }

    private decimal CartTotal => Cart.Sum(item => item.TotalPrice);

    private class CartItem
    {
        public Product Product { get; set; }
        public int Quantity { get; set; }
        public decimal TotalPrice { get; set; }
    }
}
