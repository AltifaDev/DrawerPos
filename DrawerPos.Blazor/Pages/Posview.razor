@page "/posview"
@using DrawerPos.Blazor.Services
@using DrawerPos.Shared
@using System.Globalization;
@inject DrawerPos.Blazor.Services.ProductService ProductService
@inject NavigationManager Navigation
@inject SweetAlertService Swal
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject OrderService OrderService

<div class="container mx-auto">
    <div class="flex flex-col md:flex-row mt-4">
        <!-- Left Side: Products -->
        <div class="md:w-2/3 p-6">
            <div class="mb-4 border-b border-gray-200 dark:border-gray-700">
                <ul class="flex flex-wrap -mb-px text-sm font-medium text-center" id="default-tab" role="tablist">
                    @foreach (var category in categories)
                    {
                        <li class="mr-2" role="presentation">
                            <button class="inline-block p-4 border-b-2 rounded-t-sm @(category == selectedCategory ? "border-blue-500" : "border-transparent")"
                                    @onclick="() => SelectCategory(category)"
                                    aria-selected="@(category == selectedCategory)">
                                @category.CategoryName
                            </button>
                        </li>
                    }
                </ul>
            </div>
            <div class="flex flex-wrap justify-between">
                @if (products == null)
                {
                    <div>Loading products...</div>
                }
                else if (!filteredProducts.Any())
                {
                    <div>Loading products...</div>
                }
                else
                {
                    @foreach (var product in filteredProducts)
                    {
                        <button id="productlist" class="animate-fade-up product-item" @onclick="() => AddToCart(product)">
                            <div class="relative flex flex-col items-center bg-white border rounded-lg hover:shadow-lg p-2 w-24 h-24 @(Cart.Any(item => item.Product.ProductId == product.ProductId) ? "border-blue-500 border-2" : "border-gray-200")">
                                <div class="w-full h-full overflow-hidden">
                                    <img src="@($"data:image/png;base64,{product.Image}")" alt="@product.ProductName" class="w-full h-full object-contain">
                                </div>
                                <div class="absolute bottom-0 right-0 bg-gray-100 w-8 rounded">
                                    <span class="text-xs text-gray-500 font-semibold">@product.ProductSize</span>
                                </div>
                                @if (Cart.Any(item => item.Product.ProductId == product.ProductId))
                                {
                                    <div class="absolute top-0 left-0 bg-blue-500 w-8 rounded-br-lg">
                                        <span class="text-xs text-white">@Cart.First(item => item.Product.ProductId == product.ProductId).Quantity</span>
                                    </div>
                                }
                            </div>
                            <div class="text-center mt-2">
                                <p class="text-xs font-bold">@product.NameDisplay</p>
                                <span class="text-xs text-gray-500 dark:text-gray-400">@product.ProductName</span>
                                <p class="text-sm font-semibold">@product.Price.ToString("C")</p>
                            </div>
                        </button>
                    }
                }
            </div>
        </div>
        <!-- Right Side: Order Summary -->
        <EditForm id="order-form" Model="order" OnValidSubmit="HandleValidSubmit" class="md:w-1/3">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="animate-fade-up border-none w-full rounded mt-2">
                <div class="absolute w-full overflow-auto p-6 rounded-lg" style="height:400px;background: rgb(224,222,222);background: linear-gradient(190deg, rgba(224,222,222,1) 0%, rgba(251,251,251,1) 80%, rgba(255,255,255,1) 100%);">
                    <div class="p-2 mx-auto ml-1 mb-2 w-full h-14">
                        <div class="flex justify-between items-center mb-2">
                            <div class="ml-2">
                                <h2 class="text-md font-semibold">Order List</h2>
                                @if (@lastBillNo == "")
                                {
                                    <p class="text-sm text-gray-500">Transaction No BillNo.</p>
                                }
                                else
                                {
                                    <p class="text-sm text-gray-500">Transaction @lastBillNo</p>
                                }


                            </div>
                            <div class="flex space-x-2">
                                <button class="bg-gray-200 p-1 rounded-full hover:bg-gray-300" @onclick="RemoveAllFromCart">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                    @foreach (var item in Cart)
                    {
                        <div id="orderlist" class="animate-fade-up relative text-black p-2 border-gray-300 rounded-lg shadow-lg flex flex-col items-center w-full ml-1 mb-2 transition-max-height duration-300 "
                             @onclick="() => SelectItem(item)"
                             style="@(selectedItem == item ? "max-height: 300px; background-color: #353535; color:#ffffff" : "max-height: 80px; background-color: #ffffff; color:#000000")">
                            <div class="flex w-full items-start justify-between">
                                <div class="w-14 h-14 overflow-hidden">
                                    <img src="@($"data:image/png;base64,{item.Product.Image}")" alt="@item.Product.ProductName" class="w-full h-full object-contain">
                                </div>
                                <div class="flex flex-col items-center">
                                    <span class="text-sm mt-2">@item.Product.NameDisplay (@item.Product.ProductSize)</span>
                                    <span class="text-md font-bold">@item.TotalPrice.ToString("0.##") ฿</span>
                                </div>
                                <div class="flex flex-col items-center mt-0 md:mb-0 md:mr-4">
                                    <button class="bg-gray-600 hover:bg-gray-500 rounded-full mt-0.5" @onclick="() => UpdateQuantity(item, 1)">
                                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v12m6-6H6"></path>
                                        </svg>
                                    </button>
                                    <span class="text-sm font-bold">@item.Quantity</span>
                                    <button class="bg-gray-600 hover:bg-gray-500 rounded-full mb-0.5" @onclick="() => UpdateQuantity(item, -1)">
                                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 12H6"></path>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                            @if (selectedItem == item)
                            {
                                <div class="flex justify-between w-full mt-4 space-x-4 animate-fade-in">
                                    <button class="py-2 px-2 w-full inline-flex justify-center items-center gap-x-2 text-xs font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-800">Note</button>
                                    <button class="py-2 px-2 w-full inline-flex justify-center items-center gap-x-2 text-xs font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-800">Discount</button>
                                    <button class="py-2 px-2 w-full inline-flex justify-center items-center gap-x-2 text-xs font-medium rounded-lg border border-gray-200 bg-white text-red-800 shadow-sm hover:bg-gray-50 dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-800" @onclick="() => RemoveFromCart(item)">Remove</button>
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="absolute border-none p-6 blur-bg w-full" style="top:390px">
                    <div class="flex items-center justify-between hidden">
                        <span class="font-medium">Quantity:</span>
                        <span class="font-semibold">@Cart.Sum(item => item.Quantity).ToString()</span>
                    </div>
                    <div class="flex items-center justify-between">
                        <span class="font-medium">Sub Total:</span>
                        <span class="font-semibold">@SubTotal.ToString("C", customThaiCulture)</span>
                    </div>
                    <div class="flex items-center justify-between">
                        <span class="font-medium">Discount:</span>
                        <span class="font-semibold">@Discount.ToString("C", customThaiCulture)</span>
                    </div>
                    <div class="flex items-center justify-between">
                        <span class="font-medium">Amount</span>
                        <input type="text" id="balance-display" class="font-semibold text-end border-none h-7 w-full" style="text-align:right; padding-right:0" />
                    </div>
                    <div class="flex items-center justify-between hidden">
                        <span class="font-medium">Tax:</span>
                        <span class="font-semibold">@Tax.ToString("C", customThaiCulture)</span>
                    </div>
                    <div class="flex items-center justify-between">
                        <span class="font-semibold">Total:</span>
                        <span class="font-semibold text-blue-500">@Total.ToString("C", customThaiCulture)</span>
                    </div>
                    <div class="flex items-center justify-between">
                        <span class="font-semibold">Payment Method</span>
                        <input type="text" @bind="paymentMethod" id="payment-method" class="font-semibold text-end border-none h-7 w-full" style="text-align:right; padding-right:0" />
                    </div>
                    <hr class="h-px my-4 bg-gray-200 border-0 dark:bg-gray-700">
                    <div class="flex items-center">
                        <span class="text-gray-500">Payment Method</span>
                    </div>
                    <div class="flex items-center mt-2">
                        <button type="button" class="text-gray-900 bg-white hover:bg-gray-100 border border-gray-200 focus:ring-4 focus:outline-none focus:ring-gray-100 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-gray-800 dark:bg-white dark:border-gray-700 dark:text-gray-900 dark:hover:bg-gray-200 me-2 mb-2"
                                @onclick="ShowCalculator">
                            <div class="flex flex-col items-center">
                                <span>Cash</span>
                            </div>
                        </button>
                        <button type="button" id="qrpay-button" class="text-gray-900 bg-white hover:bg-gray-100 border border-gray-200 focus:ring-4 focus:outline-none focus:ring-gray-100 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-gray-800 dark:bg-white dark:border-gray-700 dark:text-gray-900 dark:hover:bg-gray-200 me-2 mb-2">
                            <div class="flex flex-col items-center">
                                <span>QrPay</span>
                            </div>
                        </button>
                        <button type="button" id="card-button" class="text-gray-900 bg-white hover:bg-gray-100 border border-gray-200 focus:ring-4 focus:outline-none focus:ring-gray-100 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-gray-800 dark:bg-white dark:border-gray-700 dark:text-gray-900 dark:hover:bg-gray-200 me-2 mb-2">
                            <div class="flex flex-col items-center">
                                <span>Card</span>
                            </div>
                        </button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private Order order = new Order();
    private Payment payment = new Payment();
    private OrderItem orderItem = new OrderItem();
    private IEnumerable<Product> products = new List<Product>();
    private IEnumerable<Product> filteredProducts = new List<Product>();
    private IEnumerable<Category> categories = new List<Category>();

    private Category selectedCategory;
    private decimal SubTotal => Cart.Sum(item => item.Product.Price * item.Quantity);
    private decimal Tax => 0; // Example tax rate of 7%
    private decimal Total => (SubTotal + Discount) + Tax;
    private decimal Discount => 0;
    private CultureInfo customThaiCulture;
    private static Posview instance;
    private string errorMessage;
    private string lastBillNo;
    private string paymentMethod;


    protected override void OnInitialized()
    {
        instance = this;
    }
    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProducts();
        categories = await ProductService.GetCategories();


        if (categories.Any())
        {
            selectedCategory = categories.First();
            FilterProducts();
        }

        customThaiCulture = new CultureInfo("th-TH");
        customThaiCulture.NumberFormat.CurrencyPositivePattern = 3;
        customThaiCulture.NumberFormat.CurrencyNegativePattern = 12;
        try
        {
            lastBillNo = await OrderService.GetLastBillNoAsync();
        }
        catch (HttpRequestException ex) when (ex.Message.Contains("404"))
        {
            // Handle 404 error gracefully
            lastBillNo = "N/A";
            // Optionally show a message or handle the absence of data
        }
        catch (Exception ex)
        {
            // Handle other exceptions
            errorMessage = $"Error fetching last bill number: {ex.Message}";
        }
    }
    private async Task ShowCalculator()
    {

        if (Cart.Sum(item => item.Quantity) == 0)
        {
            await JS.InvokeVoidAsync("NotCalculator");
        }
        else
        {
            await JS.InvokeVoidAsync("showNumber", Total.ToString("C", customThaiCulture));
        }
    }
    public async Task UpdateBalanceView()
    {
        var balance = await JS.InvokeAsync<string>("getBalanceValue");
        await JS.InvokeVoidAsync("eval", $"document.getElementById('balance-display').value = '{balance}'");
    }
    [JSInvokable]
    public async Task HandleValidSubmit()
    {
        try
        {
            var orderItems = Cart.Select(cartItem => new OrderItem
                {
                    ProductId = cartItem.Product.ProductId,
                    Quantity = cartItem.Quantity,
                    Price = cartItem.TotalPrice,
                    Discount = cartItem.Discount
                }).ToList();

            // Assuming order and payment are properly initialized
            order.OrderItems = orderItems;
            payment.Amount = CartTotal;  // Example: Calculate total amount from cart
            payment.PaymentMethod = paymentMethod;  // Example: Get from UI input

            order.Payments.Add(payment);
            order.TotalAmount = CartTotal;
            order.TotalDiscount = CartDiscountTotal;

            await OrderService.CreateOrder(order);
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to create order: {ex.Message}";
            // Log your error if needed
        }
    }
    [JSInvokable]
    public static async Task StaticUpdateBalanceView()
    {
        if (instance != null)
        {
            await instance.UpdateBalanceView();
        }
    }


    private void SelectCategory(Category category)
    {
        selectedCategory = category;
        FilterProducts();
    }

    private void FilterProducts()
    {
        if (selectedCategory != null)
        {
            filteredProducts = products.Where(p => p.CategoryId == selectedCategory.CategoryId).ToList();
        }
        else
        {
            filteredProducts = products;
        }
    }

    private List<CartItem> Cart = new List<CartItem>();

    private void AddToCart(Product product)
    {
        var cartItem = Cart.FirstOrDefault(c => c.Product.ProductId == product.ProductId);
        if (cartItem == null)
        {
            Cart.Add(new CartItem { Product = product, Quantity = 1, TotalPrice = product.Price });
        }
        else
        {
            cartItem.Quantity++;
            cartItem.TotalPrice += product.Price;
        }
        StateHasChanged();
    }

    private CartItem selectedItem;

    private void SelectItem(CartItem item)
    {
        selectedItem = selectedItem == item ? null : item;
        StateHasChanged();
    }

    private void RemoveAllFromCart()
    {
        Cart.Clear();
        selectedItem = null;
        StateHasChanged();
    }

    private void UpdateQuantity(CartItem item, int change)
    {
        item.Quantity += change;
        if (item.Quantity <= 0)
        {
            Cart.Remove(item);
        }
        else
        {
            item.TotalPrice = item.Product.Price * item.Quantity;
        }
        StateHasChanged();
    }

    private void RemoveFromCart(CartItem item)
    {
        Cart.Remove(item);
        StateHasChanged();
    }

    private decimal CartTotal => Cart.Sum(item => item.TotalPrice);
    private decimal CartDiscountTotal => Cart.Sum(item => item.Discount);

    private class CartItem
    {
        public Product Product { get; set; }
        public int Quantity { get; set; }
        public decimal Discount { get; set; }
        public decimal TotalPrice { get; set; }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("eval", @"
                window.showCalculator = function (total) {
                    // your showCalculator function here
                }
            ");
        }
    }
    [JSInvokable]
    public static Task SubmitOrder(decimal total)
    {
        // Handle the submission logic
        Console.WriteLine($"Order submitted with total: {total}");
        return Task.CompletedTask;
    }
}
