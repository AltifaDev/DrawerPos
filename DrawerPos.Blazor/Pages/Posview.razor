@page "/posview"
@using DrawerPos.Blazor.Services
@using DrawerPos.Shared
@using System.Globalization;
@inject DrawerPos.Blazor.Services.ProductService ProductService
@inject NavigationManager Navigation
@inject SweetAlertService Swal
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject OrderService OrderService

<div class="container mx-auto">
    <div class="flex flex-col md:flex-row mt-4">
        <!-- Left Side: Products -->
        <div class="md:w-2/3 p-6">
            <div class="mb-4 border-b border-gray-200 dark:border-gray-700">
                <ul class="flex flex-wrap -mb-px text-sm font-medium text-center" id="default-tab" role="tablist">
                    @foreach (var category in categories)
                    {
                        <li class="mr-2" role="presentation">
                            <button class="inline-block p-4 border-b-2 rounded-t-sm @(category == selectedCategory ? "border-blue-500" : "border-transparent")"
                                    @onclick="() => SelectCategory(category)"
                                    aria-selected="@(category == selectedCategory)">
                                @category.CategoryName
                            </button>
                        </li>
                    }
                </ul>
            </div>
            <div class="flex flex-wrap justify-between">
                @if (products == null)
                {
                    <div>Loading products...</div>
                }
                else if (!filteredProducts.Any())
                {
                    <div role="status" class="animate-fade-up p-2 border border-gray-200 rounded shadow animate-pulse  dark:border-gray-700 overflow-hidden" style="height:164px; width:120px">
                        <div class="flex items-center justify-center mb-4 bg-gray-300 rounded dark:bg-gray-700" style="height:98px; width:98px">
                            <svg class="w-full h-full text-gray-200 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                                <path d="M14.066 0H7v5a2 2 0 0 1-2 2H0v11a1.97 1.97 0 0 0 1.934 2h12.132A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.934-2ZM10.5 6a1.5 1.5 0 1 1 0 2.999A1.5 1.5 0 0 1 10.5 6Zm2.221 10.515a1 1 0 0 1-.858.485h-8a1 1 0 0 1-.9-1.43L5.6 10.039a.978.978 0 0 1 .936-.57 1 1 0 0 1 .9.632l1.181 2.981.541-1a.945.945 0 0 1 .883-.522 1 1 0 0 1 .879.529l1.832 3.438a1 1 0 0 1-.031.988Z" />
                                <path d="M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.98 2.98 0 0 0 .13 5H5Z" />
                            </svg>
                        </div>
                        <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-full mb-4"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div>

                        <span class="sr-only">Loading...</span>
                    </div>
                    <div role="status" class="animate-fade-up p-2 border border-gray-200 rounded shadow animate-pulse  dark:border-gray-700 overflow-hidden" style="height:164px; width:120px">
                        <div class="flex items-center justify-center mb-4 bg-gray-300 rounded dark:bg-gray-700" style="height:98px; width:98px">
                            <svg class="w-full h-full text-gray-200 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                                <path d="M14.066 0H7v5a2 2 0 0 1-2 2H0v11a1.97 1.97 0 0 0 1.934 2h12.132A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.934-2ZM10.5 6a1.5 1.5 0 1 1 0 2.999A1.5 1.5 0 0 1 10.5 6Zm2.221 10.515a1 1 0 0 1-.858.485h-8a1 1 0 0 1-.9-1.43L5.6 10.039a.978.978 0 0 1 .936-.57 1 1 0 0 1 .9.632l1.181 2.981.541-1a.945.945 0 0 1 .883-.522 1 1 0 0 1 .879.529l1.832 3.438a1 1 0 0 1-.031.988Z" />
                                <path d="M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.98 2.98 0 0 0 .13 5H5Z" />
                            </svg>
                        </div>
                        <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-full mb-4"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div>

                        <span class="sr-only">Loading...</span>
                    </div>
                    <div role="status" class="animate-fade-up p-2 border border-gray-200 rounded shadow animate-pulse  dark:border-gray-700 overflow-hidden" style="height:164px; width:120px">
                        <div class="flex items-center justify-center mb-4 bg-gray-300 rounded dark:bg-gray-700" style="height:98px; width:98px">
                            <svg class="w-full h-full text-gray-200 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                                <path d="M14.066 0H7v5a2 2 0 0 1-2 2H0v11a1.97 1.97 0 0 0 1.934 2h12.132A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.934-2ZM10.5 6a1.5 1.5 0 1 1 0 2.999A1.5 1.5 0 0 1 10.5 6Zm2.221 10.515a1 1 0 0 1-.858.485h-8a1 1 0 0 1-.9-1.43L5.6 10.039a.978.978 0 0 1 .936-.57 1 1 0 0 1 .9.632l1.181 2.981.541-1a.945.945 0 0 1 .883-.522 1 1 0 0 1 .879.529l1.832 3.438a1 1 0 0 1-.031.988Z" />
                                <path d="M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.98 2.98 0 0 0 .13 5H5Z" />
                            </svg>
                        </div>
                        <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-full mb-4"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div>

                        <span class="sr-only">Loading...</span>
                    </div>
                    <div role="status" class="animate-fade-up p-2 border border-gray-200 rounded shadow animate-pulse  dark:border-gray-700 overflow-hidden" style="height:164px; width:120px">
                        <div class="flex items-center justify-center mb-4 bg-gray-300 rounded dark:bg-gray-700" style="height:98px; width:98px">
                            <svg class="w-full h-full text-gray-200 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                                <path d="M14.066 0H7v5a2 2 0 0 1-2 2H0v11a1.97 1.97 0 0 0 1.934 2h12.132A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.934-2ZM10.5 6a1.5 1.5 0 1 1 0 2.999A1.5 1.5 0 0 1 10.5 6Zm2.221 10.515a1 1 0 0 1-.858.485h-8a1 1 0 0 1-.9-1.43L5.6 10.039a.978.978 0 0 1 .936-.57 1 1 0 0 1 .9.632l1.181 2.981.541-1a.945.945 0 0 1 .883-.522 1 1 0 0 1 .879.529l1.832 3.438a1 1 0 0 1-.031.988Z" />
                                <path d="M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.98 2.98 0 0 0 .13 5H5Z" />
                            </svg>
                        </div>
                        <div class="h-2.5 bg-gray-200 rounded-full dark:bg-gray-700 w-full mb-4"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 mb-2.5"></div>
                        <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700"></div>

                        <span class="sr-only">Loading...</span>
                    </div>

                }
                else
                {
                    @foreach (var product in filteredProducts)
                    {
                        <button id="productlist" class="animate-fade-up product-item" @onclick="() => AddToCart(product)">
                            <div class="relative flex flex-col items-center bg-white border rounded-lg hover:shadow-lg p-2 w-24 h-24 @(Cart.Any(item => item.Product.ProductId == product.ProductId) ? "border-blue-500 border-2" : "border-gray-200")">
                                <div class="w-full h-full overflow-hidden">
                                    <img src="@($"data:image/png;base64,{product.Image}")" alt="@product.ProductName" class="w-full h-full object-contain">
                                </div>
                                <div class="absolute bottom-0 right-0 bg-gray-100 w-8 rounded">
                                    <span class="text-xs text-gray-500 font-semibold">@product.ProductSize</span>
                                </div>
                                @if (Cart.Any(item => item.Product.ProductId == product.ProductId))
                                {
                                    <div class="absolute top-0 left-0 bg-blue-500 w-8 rounded-br-lg">
                                        <span class="text-xs text-white">@Cart.First(item => item.Product.ProductId == product.ProductId).Quantity</span>
                                    </div>
                                }
                            </div>
                            <div class="text-center mt-2">
                                <p class="text-xs font-bold">@product.NameDisplay</p>
                                <span class="text-xs text-gray-500 dark:text-gray-400">@product.ProductName</span>
                                <p class="text-sm font-semibold">@product.Price.ToString("C")</p>
                            </div>
                        </button>
                    }
                }
            </div>
        </div>
        <!-- Right Side: Order Summary -->
        <EditForm id="order-form" Model="order" OnValidSubmit="HandleValidSubmit" class="md:w-1/3">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="animate-fade-up border-none w-full rounded mt-2">
                <div class="absolute w-full overflow-auto p-6 rounded-lg" style="height:400px;background: rgb(224,222,222);background: linear-gradient(190deg, rgba(224,222,222,1) 0%, rgba(251,251,251,1) 80%, rgba(255,255,255,1) 100%);">
                    <div class="p-2 mx-auto ml-1 mb-2 w-full h-14">
                        <div class="flex justify-between items-center mb-2">
                            <div class="ml-2">
                                <h2 class="text-md font-semibold">Order List</h2>
                                @if (@lastBillNo == "")
                                {
                                    <p class="text-sm text-gray-500">Transaction No BillNo.</p>
                                }
                                else
                                {
                                    <p class="text-sm text-gray-500">Transaction @lastBillNo</p>
                                }
                            </div>
                            <div class="flex space-x-2">
                                <button class="bg-gray-200 p-1 rounded-full hover:bg-gray-300">
                                    <!-- Percentage Icon (using Heroicons) -->
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                </button>
                                <button class="bg-gray-200 p-1 rounded-full hover:bg-gray-300" @onclick="RemoveAllFromCart">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                    @foreach (var item in Cart)
                    {
                        <div id="orderlist" class="animate-fade-up relative text-black p-2 border-gray-300 rounded-lg shadow-lg flex flex-col items-center w-full ml-1 mb-2 transition-max-height duration-300 "
                             @onclick="() => SelectItem(item)"
                             style="@(selectedItem == item ? "max-height: 300px; background-color: #353535; color:#ffffff" : "max-height: 80px; background-color: #ffffff; color:#000000")">
                            <div class="flex w-full items-start justify-between">
                                <div class="w-14 h-14 overflow-hidden">
                                    <img src="@($"data:image/png;base64,{item.Product.Image}")" alt="@item.Product.ProductName" class="w-full h-full object-contain">
                                </div>
                                <div class="flex flex-col items-center">
                                    <span class="text-sm mt-2">@item.Product.NameDisplay (@item.Product.ProductSize)</span>
                                    <span class="text-md font-bold">@item.TotalPrice.ToString("0.##") ฿</span>
                                </div>
                                <div class="flex flex-col items-center mt-0 md:mb-0 md:mr-4">
                                    <button class="bg-gray-600 hover:bg-gray-500 rounded-full mt-0.5" @onclick="() => UpdateQuantity(item, 1)">
                                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v12m6-6H6"></path>
                                        </svg>
                                    </button>
                                    <span class="text-sm font-bold">@item.Quantity</span>
                                    <button class="bg-gray-600 hover:bg-gray-500 rounded-full mb-0.5" @onclick="() => UpdateQuantity(item, -1)">
                                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 12H6"></path>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                            @if (selectedItem == item)
                            {
                                <div class="flex justify-between w-full mt-4 space-x-4 animate-fade-down animate-ease-in">
                                    <button  class="py-2 px-2 w-full inline-flex justify-center items-center gap-x-2 text-xs font-medium rounded-lg border border-gray-200 text-white shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark\:text-white dark:hover:bg-neutral-800">Note</button>
                                    <button class="py-2 px-2 w-full inline-flex justify-center items-center gap-x-2 text-xs font-medium rounded-lg border border-gray-200  text-white shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark\:text-white dark:hover:bg-neutral-800">Discount</button>
                                    <button class="py-2 px-2 w-full inline-flex justify-center items-center gap-x-2 text-xs font-medium rounded-lg border border-gray-200  text-white shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark\:text-white dark:hover:bg-neutral-800" @onclick="() => RemoveFromCart(item)">Remove</button>
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="absolute border-none p-6 blur-bg w-full" style="top:390px">
                    <div class="flex items-center justify-between hidden">
                        <span class="font-medium">Quantity:</span>
                        <span class="font-semibold">@Cart.Sum(item => item.Quantity).ToString()</span>
                    </div>
                    <div class="flex items-center justify-between">
                        <span class="font-medium">Sub Total:</span>
                        <span class="font-semibold">@SubTotal.ToString("C", customThaiCulture)</span>
                    </div>
                    <div class="flex items-center justify-between">
                        <span class="font-medium">Discount:</span>
                        <span class="font-semibold">@Discount.ToString("C", customThaiCulture)</span>
                    </div>
                    <div class="flex items-center justify-between">
                        <span class="font-medium">Amount</span>
                        <input type="text" id="balance-display" class="font-semibold text-end border-none h-7 w-full" style="text-align:right; padding-right:0" />
                    </div>
                    <div class="flex items-center justify-between hidden">
                        <span class="font-medium">Tax:</span>
                        <span class="font-semibold">@Tax.ToString("C", customThaiCulture)</span>
                    </div>
                    <div class="flex items-center justify-between">
                        <span class="font-semibold">Total:</span>
                        <span class="font-semibold text-blue-500">@Total.ToString("C", customThaiCulture)</span>
                    </div>
                    <div class="flex items-center justify-between">
                        <span class="font-semibold">Payment Method</span>
                        <input type="text" @bind="paymentMethod" id="payment-method" class="font-semibold text-end border-none h-7 w-full" style="text-align:right; padding-right:0" />
                    </div>
                    <hr class="h-px my-4 bg-gray-200 border-0 dark:bg-gray-700">
                    <div class="flex items-center">
                        <span class="text-gray-500">Payment Method</span>
                    </div>
                    <div class="flex items-center mt-2">
                        <!--Open Calculator-->
                        <button type="button" class="text-gray-900 bg-white hover:bg-gray-100 border border-gray-200 focus:ring-4 focus:outline-none focus:ring-gray-100 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-gray-800 dark:bg-white dark:border-gray-700 dark:text-gray-900 dark:hover:bg-gray-200 me-2 mb-2"
                                @onclick="ShowCalculator">
                            <div class="flex flex-col items-center">
                                <svg class="w-8 h-6 me-2 ml-2" viewBox="0 0 24 24" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/">
                                    <g transform="translate(0 -1028.4)">
                                        <g>
                                            <rect height="14" width="24" y="1031.4" x="0" fill="#16a085" />
                                            <rect height="14" width="24" y="1032.4" x="-1.0962e-8" fill="#1abc9c" />
                                            <path d="m5 1033.4c0.0001 0 0 0 0 0 0 2.2-1.7909 4-4 4v3.9c2.2091 0 4 1.8 4 4.1h14v-0.1c0-2.2 1.791-4 4-4v-3.9c-2.209 0-4-1.8-4-4h-14z" fill="#ecf0f1" />
                                            <path d="m16 11c0 2.761-1.791 5-4 5-2.2091 0-4-2.239-4-5 0-2.7614 1.7909-5 4-5 2.209 0 4 2.2386 4 5z" transform="translate(0 1028.4)" fill="#1abc9c" />
                                        </g>
                                        <path d="m10.281 1037.1 2.472-0.7h0.247v5c0 0.3 0.022 0.5 0.067 0.6 0.05 0.1 0.15 0.1 0.3 0.2h0.914v0.2h-3.82v-0.2h0.929c0.139-0.1 0.237-0.1 0.292-0.2s0.082-0.3 0.082-0.6v-3.2c0-0.5-0.025-0.7-0.075-0.9-0.035-0.1-0.1-0.1-0.195-0.2h-0.329c-0.185 0-0.442 0-0.772 0.1l-0.112-0.1" fill="#ecf0f1" />
                                        <g transform="matrix(1.9176 0 0 1.1179 18.509 -118.14)" fill="#ecf0f1">
                                            <g transform="translate(-18.773 13.418)">
                                                <path d="m40 5c-0.875 0-1.642 0.2021-2.188 0.5h-0.812v0.2812 0.1563 0.0625 0.0625 0.4375c0 0.8285 1.343 1.5 3 1.5s3-0.6715 3-1.5v-0.4375-0.0625-0.0625-0.1563-0.2812h-0.812c-0.546-0.2979-1.313-0.5-2.188-0.5z" transform="matrix(.52148 0 0 .89455 -9.6523 1024.7)" fill="#f39c12" />
                                                <path d="m42 7.5c0 0.8284-1.343 1.5-3 1.5s-3-0.6716-3-1.5 1.343-1.5 3-1.5 3 0.6716 3 1.5z" transform="matrix(.52148 0 0 .89455 -9.1309 1022.9)" fill="#f1c40f" />
                                            </g>
                                            <g fill="#ecf0f1">
                                                <g transform="translate(-18.773 11.629)">
                                                    <path d="m40 5c-0.875 0-1.642 0.2021-2.188 0.5h-0.812v0.2812 0.1563 0.0625 0.0625 0.4375c0 0.8285 1.343 1.5 3 1.5s3-0.6715 3-1.5v-0.4375-0.0625-0.0625-0.1563-0.2812h-0.812c-0.546-0.2979-1.313-0.5-2.188-0.5z" transform="matrix(.52148 0 0 .89455 -9.6523 1024.7)" fill="#f39c12" />
                                                    <path d="m42 7.5c0 0.8284-1.343 1.5-3 1.5s-3-0.6716-3-1.5 1.343-1.5 3-1.5 3 0.6716 3 1.5z" transform="matrix(.52148 0 0 .89455 -9.1309 1022.9)" fill="#f1c40f" />
                                                </g>
                                                <g transform="translate(-18.773 9.8401)">
                                                    <path d="m40 5c-0.875 0-1.642 0.2021-2.188 0.5h-0.812v0.2812 0.1563 0.0625 0.0625 0.4375c0 0.8285 1.343 1.5 3 1.5s3-0.6715 3-1.5v-0.4375-0.0625-0.0625-0.1563-0.2812h-0.812c-0.546-0.2979-1.313-0.5-2.188-0.5z" transform="matrix(.52148 0 0 .89455 -9.6523 1024.7)" fill="#f39c12" />
                                                    <path d="m42 7.5c0 0.8284-1.343 1.5-3 1.5s-3-0.6716-3-1.5 1.343-1.5 3-1.5 3 0.6716 3 1.5z" transform="matrix(.52148 0 0 .89455 -9.1309 1022.9)" fill="#f1c40f" />
                                                </g>
                                                <g transform="translate(-18.773 8.0509)">
                                                    <path d="m40 5c-0.875 0-1.642 0.2021-2.188 0.5h-0.812v0.2812 0.1563 0.0625 0.0625 0.4375c0 0.8285 1.343 1.5 3 1.5s3-0.6715 3-1.5v-0.4375-0.0625-0.0625-0.1563-0.2812h-0.812c-0.546-0.2979-1.313-0.5-2.188-0.5z" transform="matrix(.52148 0 0 .89455 -9.6523 1024.7)" fill="#f39c12" />
                                                    <path d="m42 7.5c0 0.8284-1.343 1.5-3 1.5s-3-0.6716-3-1.5 1.343-1.5 3-1.5 3 0.6716 3 1.5z" transform="matrix(.52148 0 0 .89455 -9.1309 1022.9)" fill="#f1c40f" />
                                                </g>
                                                <g transform="translate(-15.123 13.418)">
                                                    <path d="m40 5c-0.875 0-1.642 0.2021-2.188 0.5h-0.812v0.2812 0.1563 0.0625 0.0625 0.4375c0 0.8285 1.343 1.5 3 1.5s3-0.6715 3-1.5v-0.4375-0.0625-0.0625-0.1563-0.2812h-0.812c-0.546-0.2979-1.313-0.5-2.188-0.5z" transform="matrix(.52148 0 0 .89455 -9.6523 1024.7)" fill="#f39c12" />
                                                    <path d="m42 7.5c0 0.8284-1.343 1.5-3 1.5s-3-0.6716-3-1.5 1.343-1.5 3-1.5 3 0.6716 3 1.5z" transform="matrix(.52148 0 0 .89455 -9.1309 1022.9)" fill="#f1c40f" />
                                                </g>
                                                <g transform="translate(-14.08 12.524)">
                                                    <path d="m40 5c-0.875 0-1.642 0.2021-2.188 0.5h-0.812v0.2812 0.1563 0.0625 0.0625 0.4375c0 0.8285 1.343 1.5 3 1.5s3-0.6715 3-1.5v-0.4375-0.0625-0.0625-0.1563-0.2812h-0.812c-0.546-0.2979-1.313-0.5-2.188-0.5z" transform="matrix(.52148 0 0 .89455 -9.6523 1024.7)" fill="#f39c12" />
                                                    <path d="m42 7.5c0 0.8284-1.343 1.5-3 1.5s-3-0.6716-3-1.5 1.343-1.5 3-1.5 3 0.6716 3 1.5z" transform="matrix(.52148 0 0 .89455 -9.1309 1022.9)" fill="#f1c40f" />
                                                </g>
                                                <g transform="translate(-18.773 6.2618)">
                                                    <path d="m40 5c-0.875 0-1.642 0.2021-2.188 0.5h-0.812v0.2812 0.1563 0.0625 0.0625 0.4375c0 0.8285 1.343 1.5 3 1.5s3-0.6715 3-1.5v-0.4375-0.0625-0.0625-0.1563-0.2812h-0.812c-0.546-0.2979-1.313-0.5-2.188-0.5z" transform="matrix(.52148 0 0 .89455 -9.6523 1024.7)" fill="#f39c12" />
                                                    <path d="m42 7.5c0 0.8284-1.343 1.5-3 1.5s-3-0.6716-3-1.5 1.343-1.5 3-1.5 3 0.6716 3 1.5z" transform="matrix(.52148 0 0 .89455 -9.1309 1022.9)" fill="#f1c40f" />
                                                </g>
                                            </g>
                                        </g>
                                    </g>
                                </svg>
                                <span>Cash</span>
                            </div>
                        </button>
                       

                        <!--ButtonSubmit QRPayment-->
                        @if (Cart.Sum(item => item.Quantity) == 0)
                        {
                            <button type="button" id="qrpay-Reject" class="text-gray-900 bg-white hover:bg-gray-100 border border-gray-200 focus:ring-4 focus:outline-none focus:ring-gray-100 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-gray-800 dark:bg-white dark:border-gray-700 dark:text-gray-900 dark:hover:bg-gray-200 me-2 mb-2"
                                    @onclick="SetQrPaymentMethodReject">
                                <div class="flex flex-col items-center">
                                    <svg fill="#000000" class="w-8 h-6 me-2 ml-2 icon line-color" viewBox="0 0 24 24" id="qr-code-scan-2" data-name="Line Color" xmlns="http://www.w3.org/2000/svg"><path id="secondary" d="M11,11H7V7h4Zm6-4H15V9h2ZM13,17h4V13H13ZM7,17H9V15H7Z" style="fill: none; stroke: rgb(44, 169, 188); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;"></path><path id="primary" d="M8,3H4A1,1,0,0,0,3,4V8" style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;"></path><path id="primary-2" data-name="primary" d="M21,8V4a1,1,0,0,0-1-1H16" style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;"></path><path id="primary-3" data-name="primary" d="M3,16v4a1,1,0,0,0,1,1H8" style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;"></path><path id="primary-4" data-name="primary" d="M16,21h4a1,1,0,0,0,1-1V16" style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;"></path></svg>
                                    <span>QrPay</span>
                                     
                                </div>
                            </button>
                        }
                          else
                        {
                            <button type="submit" id="qrpay-button" class="text-gray-900 bg-white hover:bg-gray-100 border border-gray-200 focus:ring-4 focus:outline-none focus:ring-gray-100 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-gray-800 dark:bg-white dark:border-gray-700 dark:text-gray-900 dark:hover:bg-gray-200 me-2 mb-2"
                                    @onclick="SetQrPaymentMethod">
                                <div class="flex flex-col items-center">
                                    <span>QrPay</span>
                                </div>
                            </button>
                           
                        }
                        <button type="button" id="card-button" class="text-gray-900 bg-white hover:bg-gray-100 border border-gray-200 focus:ring-4 focus:outline-none focus:ring-gray-100 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-gray-800 dark:bg-white dark:border-gray-700 dark:text-gray-900 dark:hover:bg-gray-200 me-2 mb-2">
                            <div class="flex flex-col items-center">
                                <svg version="1.1" class="w-8 h-6 me-2 ml-2 icon line-color" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512.003 512.003" xml:space="preserve">
                                <path style="fill:#00A8E1;" d="M512,117.086c0-15.784-12.914-28.7-28.698-28.7H28.699C12.914,88.387,0,101.302,0,117.086v277.831 c0,15.784,12.914,28.7,28.699,28.7H483.3c15.784,0,28.699-12.915,28.699-28.7V117.086H512z" />
                                <rect y="236.529" style="fill:#0071CE;" width="512.003" height="65.706" />
                                <path style="fill:#FF9E16;" d="M462.255,229.602c0-9.471-7.748-17.219-17.219-17.219h-65.052c-9.471,0-17.219,7.748-17.219,17.219 v31.08c0,9.471,7.748,17.22,17.219,17.22h65.052c9.471,0,17.219-7.748,17.219-17.22V229.602z" />
                                <g>
                                <path style="fill:#FFFFFF;" d="M376.108,212.842c-7.617,1.772-13.343,8.623-13.343,16.76v31.08c0,8.138,5.726,14.988,13.343,16.76 c12.191-5.645,20.65-17.981,20.65-32.3C396.759,230.825,388.299,218.489,376.108,212.842z" />
                                <path style="fill:#FFFFFF;" d="M448.912,212.842c7.618,1.772,13.343,8.623,13.343,16.76v31.08c0,8.138-5.726,14.988-13.343,16.76 c-12.19-5.645-20.651-17.981-20.651-32.3C428.26,230.825,436.72,218.489,448.912,212.842z" />
                                <path style="fill:#FFFFFF;" d="M145.222,359.323c0-6.315-5.166-11.481-11.479-11.481H75.195c-6.315,0-11.479,5.166-11.479,11.481 v9.183c0,6.315,5.166,11.479,11.479,11.479h58.547c6.313,0,11.479-5.166,11.479-11.479V359.323z" />
                                <path style="fill:#FFFFFF;" d="M246.242,359.323c0-6.315-5.166-11.481-11.481-11.481h-58.546c-6.315,0-11.481,5.166-11.481,11.481 v9.183c0,6.315,5.166,11.479,11.481,11.479h58.546c6.313,0,11.481-5.166,11.481-11.479V359.323z" />
                                <path style="fill:#FFFFFF;" d="M347.263,359.323c0-6.315-5.166-11.481-11.479-11.481h-58.546c-6.313,0-11.479,5.166-11.479,11.481 v9.183c0,6.315,5.166,11.479,11.479,11.479h58.546c6.315,0,11.479-5.166,11.479-11.479V359.323z" />
                                <path style="fill:#FFFFFF;" d="M448.284,359.323c0-6.315-5.166-11.481-11.479-11.481h-58.547c-6.313,0-11.479,5.166-11.479,11.481 v9.183c0,6.315,5.166,11.479,11.479,11.479h58.547c6.315,0,11.479-5.166,11.479-11.479V359.323z" />
                                </g>
                                <path style="fill:#333E48;" d="M265.761,174.802c0,9.471-7.748,17.219-17.219,17.219H80.935c-9.471,0-17.219-7.748-17.219-17.219 v-17.22c0-9.471,7.748-17.219,17.219-17.219h167.607c9.471,0,17.219,7.748,17.219,17.219V174.802L265.761,174.802z" />
                                </svg>
                                <span>Card</span>
                            </div>
                        </button>
                    </div>
                </div>
            </div>
        </EditForm>
        <!--JsCallButtonSubmit CashPayment-->
        <button type="submit" id="btnCash" hidden onclick="HandleValidSubmit()"></button>
    </div>
</div>
<script>
    window.registerBlazorMethods = function (dotNetHelper) {
        window.dotNetHelper = dotNetHelper;
    };

    function callUpdateBalanceView(amountDue) {
        const balanceDisplay = document.getElementById('balance-display');
        let balanceValue = balanceDisplay.value.replace('฿', '').replace(/,/g, '').trim();
        balanceValue = parseFloat(balanceValue);

        if (balanceValue >= amountDue) {
            Swal.fire({
                icon: "success",
                title: `เงินทอน ${formatCurrency(balanceValue - amountDue)}`,
                text: "ชำระเงินสำเร็จ!",
            });

            window.dotNetHelper.invokeMethodAsync('HandleValidSubmit');
        } else {
            Swal.fire({
                icon: "error",
                title: "ยอดเงินไม่เพียงพอ",
                text: `ยอดเงินที่ต้องชำระ ${formatCurrency(amountDue)} แต่คุณมี ${formatCurrency(balanceValue)}`
            });
        }

        window.dotNetHelper.invokeMethodAsync('StaticUpdateBalanceView');
    }

    function formatCurrency(value) {
        let formattedValue = parseFloat(value).toLocaleString('th-TH', {
            style: 'decimal',
            minimumFractionDigits: 0,
        });
        return formattedValue + ' ฿';
    }
</script>
@code{
    private Order order = new Order();
    private Payment payment = new Payment();
    private OrderItem orderItem = new OrderItem();
    private IEnumerable<Product> products = new List<Product>();
    private IEnumerable<Product> filteredProducts = new List<Product>();
    private IEnumerable<Category> categories = new List<Category>();
    private Category selectedCategory;

    private decimal Tax => 0; // Example tax rate of 7%
    private decimal Total => (SubTotal + Discount) + Tax;
    private decimal CartTotal => Cart.Sum(item => item.TotalPrice);
    private decimal CartDiscountTotal => Cart.Sum(item => item.Discount);
    private decimal SubTotal => CartTotal - CartDiscountTotal;
    private decimal Discount => CartDiscountTotal;

    private CultureInfo customThaiCulture;
    private static Posview instance;
    private string errorMessage;
    private string lastBillNo;
    private string paymentMethod;

    protected override void OnInitialized()
    {
        instance = this;
    }

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProducts();
        categories = await ProductService.GetCategories();

        if (categories.Any())
        {
            selectedCategory = categories.First();
            FilterProducts();
        }

        customThaiCulture = new CultureInfo("th-TH");
        customThaiCulture.NumberFormat.CurrencyPositivePattern = 3;
        customThaiCulture.NumberFormat.CurrencyNegativePattern = 12;

        try
        {
            lastBillNo = await OrderService.GetLastBillNoAsync();
        }
        catch (HttpRequestException ex) when (ex.Message.Contains("404"))
        {
            lastBillNo = "N/A";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching last bill number: {ex.Message}";
        }
    }

    private async Task ShowCalculator()
    {
        if (Cart.Sum(item => item.Quantity) == 0)
        {
            await JS.InvokeVoidAsync("NotCalculator");
        }
        else
        {
            await JS.InvokeVoidAsync("showNumber", Total.ToString("C", customThaiCulture));
            paymentMethod = "Cash";
        }
    }

    public async Task UpdateBalanceView()
    {
        var balance = await JS.InvokeAsync<string>("getBalanceValue");
        await JS.InvokeVoidAsync("eval", $"document.getElementById('balance-display').value = '{balance}'");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JS.InvokeVoidAsync("registerBlazorMethods", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable("StaticUpdateBalanceView")]
    public static async Task StaticUpdateBalanceView()
    {
        if (instance != null)
        {
            await instance.UpdateBalanceView();
        }
    }

    [JSInvokable]
    public async Task HandleValidSubmit()
    {
        try
        {
            var orderItems = Cart.Select(cartItem => new OrderItem
                {
                    ProductId = cartItem.Product.ProductId,
                    Quantity = cartItem.Quantity,
                    Price = cartItem.TotalPrice,
                    Discount = cartItem.Discount
                }).ToList();

            order.OrderItems = orderItems;
            payment.Amount = CartTotal;
            payment.PaymentMethod = paymentMethod;

            order.Payments.Add(payment);
            order.TotalAmount = CartTotal;
            order.TotalDiscount = CartDiscountTotal;

            await OrderService.CreateOrder(order);
            errorMessage = null;

            // Clear form and cart
            order = new Order();
            payment = new Payment();
            Cart.Clear();
            paymentMethod = string.Empty;
            selectedItem = null;
            lastBillNo = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to create order: {ex.Message}";
        }
    }

    private async Task SetQrPaymentMethodReject()
    {
        await JS.InvokeVoidAsync("NotCalculator");
    }

    private void SetQrPaymentMethod()
    {
        paymentMethod = "Qr Payment";
        StateHasChanged(); // Ensure the UI updates to reflect the change
        Swal.FireAsync("ชำระเงินสำเร็จ!", "ชำระค่าบริการเรียบร้อยแล้ว", SweetAlertIcon.Success);
    }

    private void SelectCategory(Category category)
    {
        selectedCategory = category;
        FilterProducts();
    }

    private void FilterProducts()
    {
        if (selectedCategory != null)
        {
            filteredProducts = products.Where(p => p.CategoryId == selectedCategory.CategoryId).ToList();
        }
        else
        {
            filteredProducts = products;
        }
    }

    private List<CartItem> Cart = new List<CartItem>();

    private void AddToCart(Product product)
    {
        var cartItem = Cart.FirstOrDefault(c => c.Product.ProductId == product.ProductId);
        if (cartItem == null)
        {
            Cart.Add(new CartItem { Product = product, Quantity = 1, TotalPrice = product.Price });
        }
        else
        {
            cartItem.Quantity++;
            cartItem.TotalPrice += product.Price;
        }
        StateHasChanged();
    }

    private CartItem selectedItem;

    private void SelectItem(CartItem item)
    {
        selectedItem = selectedItem == item ? null : item;
        StateHasChanged();
    }

    private void RemoveAllFromCart()
    {
        Cart.Clear();
        selectedItem = null;
        StateHasChanged();
    }

    private void UpdateQuantity(CartItem item, int change)
    {
        item.Quantity += change;
        if (item.Quantity <= 0)
        {
            Cart.Remove(item);
        }
        else
        {
            item.TotalPrice = item.Product.Price * item.Quantity;
        }
        StateHasChanged();
    }

    private void RemoveFromCart(CartItem item)
    {
        Cart.Remove(item);
        StateHasChanged();
    }

    private class CartItem
    {
        public Product Product { get; set; }
        public int Quantity { get; set; }
        public decimal Discount { get; set; }
        public decimal TotalPrice { get; set; }
    }
}