@page "/dash"
@using DrawerPos.Blazor.Services
@using DrawerPos.Shared
@using System.Text.Json
@inject DrawerPos.Blazor.Services.OrderService OrderService
@inject IJSRuntime JSRuntime

<h1 class="text-3xl font-bold p-6">Sales Performance Dashboard</h1>

<div class="grid grid-cols-4 md:grid-cols-4 lg:grid-cols-4 gap-4 mb-4">
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold">Total Orders</h2>
        <p class="text-2xl">@totalOrders</p>
    </div>
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold">Total Revenue</h2>
        <p class="text-2xl">@totalRevenue.ToString("C")</p>
    </div>
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold">Total Discounts</h2>
        <p class="text-2xl">@totalDiscounts.ToString("C")</p>
    </div>
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold">Total Payments</h2>
        <p class="text-2xl">@totalPayments.ToString("C")</p>
    </div>
</div>

<div class="grid grid-cols-2 lg:grid-cols-2 gap-4">
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold">Orders by Date</h2>
        <input type="date" @bind="startDate" class="input" />
        <input type="date" @bind="endDate" class="input" />
        <button class="btn btn-primary" @onclick="ApplyFilters">Apply</button>
        <div id="ordersChartContainer" class="mt-4">
            <canvas id="ordersChart"></canvas>
        </div>
    </div>

    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold">Revenue by Month</h2>
        <div id="revenueChartContainer" class="mt-4">
            <canvas id="revenueChart"></canvas>
        </div>
    </div>
</div>

<div class="p-4 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800 w-full">
    <h3 class="flex items-center mb-4 text-lg font-semibold text-gray-900 dark:text-white">
        Statistics this month
        <button data-popover-target="popover-description" data-popover-placement="bottom-end" type="button">
            <svg class="w-4 h-4 ml-2 text-gray-400 hover:text-gray-500" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
            </svg>
            <span class="sr-only">Show information</span>
        </button>
    </h3>
    <div data-popover="" id="popover-description" role="tooltip" class="absolute z-10 invisible inline-block text-sm font-light text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-sm opacity-0 w-72 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-400" data-popper-placement="bottom-end" style="position: absolute; inset: 0px 0px auto auto; margin: 0px; transform: translate(-315px, 81px);">
        <div class="p-3 space-y-2">
            <h3 class="font-semibold text-gray-900 dark:text-white">Statistics</h3>
            <p>Statistics is a branch of applied mathematics that involves the collection, description, analysis, and inference of conclusions from quantitative data.</p>
            <a href="#" class="flex items-center font-medium text-primary-600 dark:text-primary-500 dark:hover:text-primary-600 hover:text-primary-700">
                Read more
                <svg class="w-4 h-4 ml-1" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a 1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                </svg>
            </a>
        </div>
        <div data-popper-arrow="" style="position: absolute; left: 0px; transform: translate(271px, 0px);"></div>
    </div>
    <div class="sm:hidden">
        <label for="tabs" class="sr-only">Select tab</label>
        <select id="tabs" class="bg-gray-50 border-0 border-b border-gray-200 text-gray-900 text-sm rounded-t-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
            <option>Statistics</option>
            <option>Services</option>
            <option>FAQ</option>
        </select>
    </div>
    <ul class="hidden text-sm font-medium text-center text-gray-500 divide-x divide-gray-200 rounded-lg sm:flex dark:divide-gray-600 dark:text-gray-400" id="fullWidthTab" data-tabs-toggle="#fullWidthTabContent" role="tablist">
        <li class="w-full">
            <button id="faq-tab" data-tabs-target="#faq" type="button" role="tab" aria-controls="faq" aria-selected="true" class="inline-block w-full p-4 rounded-tl-lg bg-gray-50 hover:bg-gray-100 focus:outline-none dark:bg-gray-700 dark:hover:bg-gray-600 text-blue-600 hover:text-blue-600 dark:text-blue-500 dark:hover:text-blue-500 border-blue-600 dark:border-blue-500">Top products</button>
        </li>
    </ul>
    <div id="fullWidthTabContent" class="border-t border-gray-200 dark:border-gray-600">
        <div class="pt-4" id="faq" role="tabpanel" aria-labelledby="faq-tab">
            @if (groupedOrderItems != null && groupedOrderItems.Any())
            {
                <ul role="list" class="divide-y divide-gray-200 dark:divide-gray-700">
                    @foreach (var item in groupedOrderItems)
                    {
                        <li class="py-3 sm:py-4">
                            <div class="flex flex-col items-start">
                                <div class="flex items-center w-full mb-3">
                                    @if (item.Products != null)
                                    {
                                        <div class="w-14 h-14 overflow-hidden">
                                            <img src="@($"data:image/png;base64,{item.Products.Image ?? ""}")" alt="@item.Products.ProductName" class="w-full h-full object-contain">
                                        </div>
                                      
                                        <div class="ml-3">
                                            <p class="font-medium text-gray-900 truncate dark:text-white">@item.Products.NameDisplay</p>
                                            <p>Product: @item.Products.ProductName  @item.Products.ProductSize</p>
                                           
                                            <p>Total Quantity: @item.TotalQuantity</p>
                                            <p>Total Price: @item.TotalPrice.ToString("C")</p>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="flex-shrink-0 w-10 h-10 bg-gray-200"></div>
                                        <div class="ml-3">
                                            <p class="font-medium text-gray-900 truncate dark:text-white">Product Not Found</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No data available.</p>
            }
        </div>
    </div>

    <!-- Card Footer -->
    <div class="flex items-center justify-between pt-3 mt-5 border-t border-gray-200 sm:pt-6 dark:border-gray-700">
        <div>
            <button class="inline-flex items-center p-2 text-sm font-medium text-center text-gray-500 rounded-lg hover:text-gray-900 dark:text-gray-400 dark:hover:text-white" type="button" data-dropdown-toggle="stats-dropdown">
                Last 7 days
                <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
            </button>
            <!-- Dropdown menu -->
            <div class="z-50 hidden my-4 text-base list-none bg-white divide-y divide-gray-100 rounded shadow dark:bg-gray-700 dark:divide-gray-600" id="stats-dropdown" data-popper-placement="top" style="position: absolute; inset: auto auto 0px 0px; margin: 0px; transform: translate(1442px, 178px);" data-popper-reference-hidden="" data-popper-escaped="">
                <div class="px-4 py-3" role="none">
                    <p class="text-sm font-medium text-gray-900 truncate dark:text-white" role="none">
                        Sep 16, 2021 - Sep 22, 2021
                    </p>
                </div>
                <ul class="py-1" role="none">
                    <li>
                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-600 dark:hover:text-white" role="menuitem">Yesterday</a>
                    </li>
                    <li>
                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-600 dark:hover:text-white" role="menuitem">Today</a>
                    </li>
                    <li>
                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-600 dark:hover:text-white" role="menuitem">Last 7 days</a>
                    </li>
                    <li>
                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-600 dark:hover:text-white" role="menuitem">Last 30 days</a>
                    </li>
                    <li>
                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-600 dark:hover:text-white" role="menuitem">Last 90 days</a>
                    </li>
                </ul>
                <div class="py-1" role="none">
                    <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-600 dark:hover:text-white" role="menuitem">Custom...</a>
                </div>
            </div>
        </div>
        <div class="flex-shrink-0">
            <a href="#" class="inline-flex items-center p-2 text-xs font-medium uppercase rounded-lg text-primary-700 sm:text-sm hover:bg-gray-100 dark:text-primary-500 dark:hover:bg-gray-700">
                Full Report
                <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
            </a>
        </div>
    </div>
</div>

<div class="bg-white p-4 rounded shadow mt-4">
    <h2 class="text-lg font-semibold">Orders</h2>
    <table class="min-w-full divide-y divide-gray-200">
        <thead>
            <tr>
                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order ID</th>
                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer Name</th>
                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total Amount</th>
                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order Date</th>
            </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
            @foreach (var order in filteredOrders)
            {
                <tr>
                    <td class="px-6 py-4 whitespace-nowrap">@order.OrderId</td>
                    <td class="px-6 py-4 whitespace-nowrap">@order.Customer?.FirstName</td>
                    <td class="px-6 py-4 whitespace-nowrap">@order.TotalAmount</td>
                    <td class="px-6 py-4 whitespace-nowrap">@order.OrderDate.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private int totalOrders;
    private decimal totalRevenue;
    private decimal totalDiscounts;
    private decimal totalPayments;
    private IEnumerable<Order> orders = new List<Order>();
    private IEnumerable<Order> filteredOrders = new List<Order>();
    private DateTime? startDate;
    private DateTime? endDate;
    List<GroupedOrderItem> groupedOrderItems;

    protected override async Task OnInitializedAsync()
    {
        startDate = DateTime.Now.AddDays(-30);
        endDate = DateTime.Now;

        orders = (await OrderService.GetOrders()).ToList();
        filteredOrders = orders;
        CalculateTotals();
        groupedOrderItems = await OrderService.GetDateOrders(startDate, endDate);
        await InitializeCharts();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeCharts();
        }
    }
    private async void ApplyFilters()
    {
        filteredOrders = orders.Where(o =>
            (!startDate.HasValue || o.OrderDate.Date >= startDate.Value.Date) &&
            (!endDate.HasValue || o.OrderDate.Date <= endDate.Value.Date)).ToList();

        CalculateTotals();
        await InitializeCharts();
    }

    private void CalculateTotals()
    {
        totalOrders = filteredOrders.Count();
        totalRevenue = filteredOrders.Sum(o => o.TotalAmount ?? 0);
        totalDiscounts = filteredOrders.Sum(o => o.TotalDiscount ?? 0);
        totalPayments = filteredOrders.Sum(o => o.Payments?.Sum(p => p.Amount) ?? 0);
    }

    private async Task InitializeCharts()
    {
        await InitializeOrdersChart();
        await InitializeRevenueChart();
    }

    private async Task InitializeOrdersChart()
    {
        var ordersByDate = filteredOrders.GroupBy(o => o.OrderDate.Date)
                                         .Select(g => new { Date = g.Key, Count = g.Count() })
                                         .OrderBy(o => o.Date)
                                         .ToList();

        var labels = ordersByDate.Select(o => o.Date.ToShortDateString()).ToArray();
        var data = ordersByDate.Select(o => o.Count).ToArray();

        var config = new
        {
            type = "line",
            data = new
            {
                labels,
                datasets = new[]
                {
                new
                {
                    label = "Orders by Date",
                    data,
                    backgroundColor = "rgba(75, 192, 192, 0.2)",
                    borderColor = "rgba(75, 192, 192, 1)",
                    borderWidth = 1
                }
            }
            },
            options = new
            {
                scales = new
                {
                    y = new { beginAtZero = true }
                }
            }
        };

        var configJson = JsonSerializer.Serialize(config);
        await JSRuntime.InvokeVoidAsync("renderChart", "ordersChart", configJson);
    }

    private async Task InitializeRevenueChart()
    {
        var monthlyRevenue = await OrderService.GetMonthlyRevenue();

        var labels = monthlyRevenue.Select(r => $"{r.Month}/{r.Year}").ToArray();
        var data = monthlyRevenue.Select(r => r.TotalAmount).ToArray();

        var config = new
        {
            type = "bar",
            data = new
            {
                labels,
                datasets = new[]
                {
                new
                {
                    label = "Revenue by Month",
                    data,
                    backgroundColor = "rgba(255, 159, 64, 0.2)",
                    borderColor = "rgba(255, 159, 64, 1)",
                    borderWidth = 1
                }
            }
            },
            options = new
            {
                scales = new
                {
                    y = new { beginAtZero = true }
                }
            }
        };

        var configJson = JsonSerializer.Serialize(config);
        await JSRuntime.InvokeVoidAsync("renderChart", "revenueChart", configJson);
    }

}
