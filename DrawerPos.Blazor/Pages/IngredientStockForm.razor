@page "/ingredientstocks/{action}/{IngredientStockId:int?}"
@inject IngredientStockService IngredientStockService
@inject IngredientService IngredientService
@inject NavigationManager NavigationManager

<h3 class="text-2xl font-bold mb-4">@pageTitle</h3>

<EditForm Model="@ingredientStock" OnValidSubmit="HandleValidSubmit">
    <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2">Ingredient:</label>
        <select @bind="ingredientStock.IngredientId" class="form-control">
            <option value="">Select an ingredient</option>
            @foreach (var ingredient in ingredients)
            {
                <option value="@ingredient.IngredientId">@ingredient.IngredientName</option>
            }
        </select>
    </div>

    <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2">Quantity in Stock:</label>
        <InputNumber @bind-Value="ingredientStock.QuantityInStock" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
    </div>

    <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2">Expiration Date:</label>
        <InputDate @bind-Value="ingredientStock.ExpirationDate" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
    </div>

    <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2">Reorder Point:</label>
        <InputNumber @bind-Value="ingredientStock.ReorderPoint" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
    </div>

    <button type="submit" class="m-4 text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-sm px-5 py-2.5 text-center me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Save</button>
    <button class="m-4 text-white bg-gray-800 hover:bg-gray-600 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-full text-sm px-5 py-2.5 text-center me-2 mb-2 dark:bg-gray-600 dark:hover:bg-gray-700 dark:focus:ring-gray-800" type="button" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public string Action { get; set; }
    [Parameter]
    public int? IngredientStockId { get; set; }

    private IngredientStock ingredientStock = new IngredientStock();
    private List<Ingredient> ingredients = new List<Ingredient>();
    private string pageTitle;

    protected override async Task OnInitializedAsync()
    {
        ingredients = await IngredientService.GetIngredientsAsync();

        if (Action == "edit" && IngredientStockId.HasValue)
        {
            pageTitle = "Edit Ingredient Stock";
            ingredientStock = await IngredientStockService.GetIngredientStockByIdAsync(IngredientStockId.Value);

            if (ingredientStock == null)
            {
                NavigationManager.NavigateTo("/ingredientstocks");
                return;
            }
        }
        else if (Action == "create")
        {
            pageTitle = "Create New Ingredient Stock";
            ingredientStock = new IngredientStock();
        }
        else
        {
            // Handle invalid actions gracefully, redirect to the list page
            NavigationManager.NavigateTo("/ingredientstocks");
        }
    }
    private async Task HandleValidSubmit()
    {
        if (Action == "edit" && IngredientStockId.HasValue)
        {
            await IngredientStockService.UpdateIngredientStockAsync(IngredientStockId.Value, ingredientStock);
        }
        else if (Action == "create")
        {
            await IngredientStockService.CreateIngredientStockAsync(ingredientStock);
        }
        NavigationManager.NavigateTo("/ingredientstocks");
    }
    private void Cancel()
    {
        NavigationManager.NavigateTo("/ingredientstocks");
    }
}