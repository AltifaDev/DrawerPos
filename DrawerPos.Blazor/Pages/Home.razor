@page "/"
@page "/dashboard"
@using DrawerPos.Blazor.Services
@using DrawerPos.Shared
@using System.Text.Json
@inject DrawerPos.Blazor.Services.OrderService OrderService
@inject IJSRuntime JSRuntime

<h1 class="text-3xl font-bold p-6">Sales Performance Dashboard</h1>

<div class="grid grid-cols-4 md:grid-cols-4 lg:grid-cols-4 gap-4 mb-4">
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold">Total Orders</h2>
        <p class="text-2xl">@totalOrders</p>
    </div>
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold">Total Revenue</h2>
        <p class="text-2xl">@totalRevenue.ToString("C")</p>
    </div>
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold">Total Discounts</h2>
        <p class="text-2xl">@totalDiscounts.ToString("C")</p>
    </div>
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold">Total Payments</h2>
        <p class="text-2xl">@totalPayments.ToString("C")</p>
    </div>
</div>

<div class="grid grid-cols-2 lg:grid-cols-2 gap-4">
    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold">Orders by Date</h2>
        <input type="date" @bind="startDate" class="input" />
        <input type="date" @bind="endDate" class="input" />
        <button class="btn btn-primary" @onclick="ApplyFilters">Apply</button>
        <div id="ordersChartContainer" class="mt-4">
            <canvas id="ordersChart"></canvas>
        </div>
    </div>

    <div class="bg-white p-4 rounded shadow">
        <h2 class="text-lg font-semibold">Revenue by Month</h2>
        <div id="revenueChartContainer" class="mt-4">
            <canvas id="revenueChart"></canvas>
        </div>
    </div>
</div>
<div class="bg-white p-4 rounded shadow mt-4">
    <h2 class="text-lg font-semibold">Orders</h2>
    <table class="min-w-full divide-y divide-gray-200">
        <thead>
            <tr>
                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order ID</th>
                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer Name</th>
                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total Amount</th>
                <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order Date</th>
            </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
            @foreach (var order in filteredOrders)
            {
                <tr>
                    <td class="px-6 py-4 whitespace-nowrap">@order.OrderId</td>
                    <td class="px-6 py-4 whitespace-nowrap">@order.Customer?.FirstName</td>
                    <td class="px-6 py-4 whitespace-nowrap">@order.TotalAmount</td>
                    <td class="px-6 py-4 whitespace-nowrap">@order.OrderDate.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
</div>
<!-- Rest of the component, e.g., statistics section, orders table, etc. -->
@code {
    private int totalOrders;
    private decimal totalRevenue;
    private decimal totalDiscounts;
    private decimal totalPayments;
    private IEnumerable<Order> orders = new List<Order>();
    private IEnumerable<Order> filteredOrders = new List<Order>();
    private DateTime? startDate;
    private DateTime? endDate;
    List<GroupedOrderItem> groupedOrderItems;

    protected override async Task OnInitializedAsync()
    {
        startDate = DateTime.Now.AddDays(-30);
        endDate = DateTime.Now;

        orders = (await OrderService.GetOrders()).ToList();
        filteredOrders = orders;
        CalculateTotals();
        groupedOrderItems = await OrderService.GetDateOrders(startDate, endDate);
        await InitializeCharts();
    }

    private async Task ApplyFilters()
    {
        filteredOrders = orders.Where(o =>
            (!startDate.HasValue || o.OrderDate.Date >= startDate.Value.Date) &&
            (!endDate.HasValue || o.OrderDate.Date <= endDate.Value.Date)).ToList();

        CalculateTotals();
        groupedOrderItems = await OrderService.GetDateOrders(startDate, endDate);
        await InitializeCharts();
    }

    private void CalculateTotals()
    {
        totalOrders = filteredOrders.Count();
        totalRevenue = filteredOrders.Sum(o => o.TotalAmount ?? 0);
        totalDiscounts = filteredOrders.Sum(o => o.TotalDiscount ?? 0);
        totalPayments = filteredOrders.Sum(o => o.Payments?.Sum(p => p.Amount) ?? 0);
    }

    private async Task InitializeCharts()
    {
        await InitializeOrdersChart();
        await InitializeRevenueChart();
    }

    private async Task InitializeOrdersChart()
    {
        var ordersByDate = filteredOrders.GroupBy(o => o.OrderDate.Date)
                                         .Select(g => new { Date = g.Key, Count = g.Count() })
                                         .OrderBy(o => o.Date)
                                         .ToList();

        var labels = ordersByDate.Select(o => o.Date.ToShortDateString()).ToArray();
        var data = ordersByDate.Select(o => o.Count).ToArray();

        var config = new
        {
            type = "line",
            data = new
            {
                labels,
                datasets = new[]
                {
                    new
                    {
                        label = "Orders by Date",
                        data,
                        backgroundColor = "rgba(75, 192, 192, 0.2)",
                        borderColor = "rgba(75, 192, 192, 1)",
                        borderWidth = 1
                    }
                }
            },
            options = new
            {
                scales = new
                {
                    y = new { beginAtZero = true }
                }
            }
        };

        var configJson = JsonSerializer.Serialize(config);
        await JSRuntime.InvokeVoidAsync("renderChart", "ordersChart", configJson);
    }

    private async Task InitializeRevenueChart()
    {
        var monthlyRevenue = await OrderService.GetMonthlyRevenue();

        var labels = monthlyRevenue.Select(r => $"{r.Month}/{r.Year}").ToArray();
        var data = monthlyRevenue.Select(r => r.TotalAmount).ToArray();

        var config = new
        {
            type = "bar",
            data = new
            {
                labels,
                datasets = new[]
                {
                    new
                    {
                        label = "Revenue by Month",
                        data,
                        backgroundColor = "rgba(255, 159, 64, 0.2)",
                        borderColor = "rgba(255, 159, 64, 1)",
                        borderWidth = 1
                    }
                }
            },
            options = new
            {
                scales = new
                {
                    y = new { beginAtZero = true }
                }
            }
        };

        var configJson = JsonSerializer.Serialize(config);
        await JSRuntime.InvokeVoidAsync("renderChart", "revenueChart", configJson);
    }
}
